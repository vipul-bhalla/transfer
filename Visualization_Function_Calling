import time
import json
import io
import base64
import matplotlib.pyplot as plt
from google.cloud import bigquery
from google.oauth2 import service_account
from vertexai.generative_models import FunctionDeclaration, GenerativeModel, Part, Tool

BIGQUERY_PROJECT_ID = "balmy-curve-429612-u2"
BIGQUERY_DATASET_ID = "gcp_fdts"

# Initialize the BigQuery client
client = bigquery.Client(project=BIGQUERY_PROJECT_ID)

# Function declarations for dataset and table discovery
list_datasets_func = FunctionDeclaration(
    name="list_datasets",
    description="Get a list of datasets that will help answer the user's question",
    parameters={"type": "object", "properties": {}}
)

list_tables_func = FunctionDeclaration(
    name="list_tables",
    description="List tables in a dataset that will help answer the user's question",
    parameters={
        "type": "object",
        "properties": {
            "dataset_id": {"type": "string", "description": "Dataset ID to fetch tables from."}
        },
        "required": ["dataset_id"],
    },
)

get_table_func = FunctionDeclaration(
    name="get_table",
    description="Get information about a table, including the description, schema, and number of rows that will help answer the user's question. Always use the fully qualified dataset and table names.",
    parameters={
        "type": "object",
        "properties": {
            "table_id": {"type": "string", "description": "Fully qualified ID of the table to get information about"}
        },
        "required": ["table_id"],
    },
)

sql_query_func = FunctionDeclaration(
    name="sql_query",
    description="Get information from data in BigQuery using SQL queries",
    parameters={
        "type": "object",
        "properties": {
            "query": {"type": "string", "description": "SQL query on a single line that will help give quantitative answers to the user's question when run on a BigQuery dataset and table. In the SQL query, always use the fully qualified dataset and table names."}
        },
        "required": ["query"],
    },
)

# Function declaration for plotting
create_plot_func = FunctionDeclaration(
    name="create_plot",
    description="Generate a plot based on provided data and specifications.",
    parameters={
        "type": "object",
        "properties": {
            "plot_type": {"type": "string", "description": "Type of plot (line, scatter, bar)"},
            "data": {"type": "array", "description": "Data points for the plot", "items": {"type": "array", "items": {"type": "number"}}},
            "title": {"type": "string", "description": "Title of the plot"},
            "xlabel": {"type": "string", "description": "Label for the x-axis"},
            "ylabel": {"type": "string", "description": "Label for the y-axis"},
            "labels": {"type": "array", "description": "Labels for data series", "items": {"type": "string"}}
        },
        "required": ["plot_type", "data", "title", "xlabel", "ylabel"],
    },
)

# Tools
sql_query_tool = Tool(
    function_declarations=[list_datasets_func, list_tables_func, get_table_func, sql_query_func, create_plot_func]
)

# Initialize the model
model = GenerativeModel(
    "gemini-1.5-pro-002",
    generation_config={"temperature": 1},
    tools=[sql_query_tool],
)

chat = model.start_chat(response_validation=False)

# Plotting function
def create_plot(plot_type, data, title, xlabel, ylabel, labels=None):
    try:
        plt.figure()
        if plot_type == 'line':
            for i, series in enumerate(data):
                label = labels[i] if labels and i < len(labels) else None
                plt.plot(series, label=label)
        elif plot_type == 'scatter':
            for i, series in enumerate(data):
                plt.scatter(range(len(series)), series, label=labels[i] if (labels and i < len(labels)) else None)
        elif plot_type == 'bar':
            if len(data) > 1 and labels:
                width = 0.8 / len(data)
                x_indices = range(len(data[0]))
                for i, series in enumerate(data):
                    plt.bar([x + i * width for x in x_indices], series, width=width, label=labels[i])
            else:
                plt.bar(range(len(data[0])), data[0])
        else:
            return "Invalid plot type"

        plt.title(title)
        plt.xlabel(xlabel)
        plt.ylabel(ylabel)
        if labels:
            plt.legend()

        buf = io.BytesIO()
        plt.savefig(buf, format="png")
        buf.seek(0)
        image_base64 = base64.b64encode(buf.getvalue()).decode('utf-8')
        plt.close()
        return image_base64
    except Exception as e:
        return str(e)

# Function to handle user prompt
def handle_user_prompt(prompt, chat):
    response = chat.send_message(prompt)
    response = response.candidates[0].content.parts[0]

    while hasattr(response, "function_call"):
        function_name = response.function_call.name
        params = {key: value for key, value in response.function_call.args.items()}

        if function_name == "list_datasets":
            api_response = [BIGQUERY_DATASET_ID]
        elif function_name == "list_tables":
            dataset_id = f"{BIGQUERY_PROJECT_ID}.{params['dataset_id']}"
            api_response = [table.table_id for table in client.list_tables(dataset_id)]
        elif function_name == "get_table":
            table_id = f"{BIGQUERY_PROJECT_ID}.{params['table_id']}"
            api_response = client.get_table(table_id).to_api_repr()
        elif function_name == "sql_query":
            query = params["query"].replace("\n", " ").replace("\\", "")
            query_job = client.query(query)
            api_response = [dict(row) for row in query_job.result()]
        elif function_name == "create_plot":
            api_response = create_plot(**params)
            if isinstance(api_response, str) and api_response.startswith("/9j/"):  # Base64 image check
                return {"message": "A plot has been generated.", "image_base64": api_response}
        else:
            api_response = "Unsupported function call"

        response = chat.send_message(
            Part.from_function_response(
                name=function_name,
                response={"content": api_response},
            )
        )
        response = response.candidates[0].content.parts[0]

    return response._raw_part.text

# Interactive chat
def interactive_chat():
    global chat
    while True:
        user_prompt = input("Ask your question (or type 'exit' to quit): ")
        if user_prompt.lower() == 'exit':
            break
        response = handle_user_prompt(user_prompt, chat)
        if isinstance(response, dict) and "image_base64" in response:
            print("\nResponse:")
            print(response["message"])
            print(f"Base64 Image: {response['image_base64']}")
        else:
            print("\nResponse:")
            print(response)

# Run the interactive chat
interactive_chat()
