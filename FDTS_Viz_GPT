import time
import base64
import io
from google.cloud import bigquery
from google.oauth2 import service_account
import matplotlib.pyplot as plt
from vertexai.generative_models import FunctionDeclaration, GenerativeModel, Part, Tool

# Path to your service account key file
SERVICE_ACCOUNT_JSON = 'gcp_demo_service_key.json'
BIGQUERY_PROJECT_ID = "balmy-curve-429612-u2"
BIGQUERY_DATASET_ID = "gcp_fdts"
client = bigquery.Client(project=BIGQUERY_PROJECT_ID)

# Function declarations remain the same
list_datasets_func = FunctionDeclaration(
    name="list_datasets",
    description="Get a list of datasets that will help answer the user's question",
    parameters={"type": "object", "properties": {}},
)
list_tables_func = FunctionDeclaration(
    name="list_tables",
    description="List tables in a dataset that will help answer the user's question",
    parameters={
        "type": "object",
        "properties": {
            "dataset_id": {"type": "string", "description": "Dataset ID to fetch tables from."}
        },
        "required": ["dataset_id"],
    },
)
get_table_func = FunctionDeclaration(
    name="get_table",
    description="Get information about a table, including the description, schema, and number of rows that will help answer the user's question. Always use the fully qualified dataset and table names.",
    parameters={
        "type": "object",
        "properties": {
            "table_id": {"type": "string", "description": "Fully qualified ID of the table to get information about"}
        },
        "required": ["table_id"],
    },
)

sql_query_func = FunctionDeclaration(
    name="sql_query",
    description="Get information from data in BigQuery using SQL queries",
    parameters={
        "type": "object",
        "properties": {
            "query": {"type": "string", "description": "SQL query on a single line that will help give quantitative answers to the user's question when run on a BigQuery dataset and table. In the SQL query, always use the fully qualified dataset and table names."}
        },
        "required": ["query"],
    },
)


def generate_visualization(data, graph_type, x_label, y_label, title):
    """
    Generates a visualization based on the given data and parameters.
    :param data: A list of dictionaries containing the data to plot.
    :param graph_type: Type of graph to generate (e.g., "line", "bar").
    :param x_label: Label for the x-axis.
    :param y_label: Label for the y-axis.
    :param title: Title of the graph.
    :return: Dictionary containing graph metadata and base64-encoded image string.
    """
    x = [item['x'] for item in data]
    y = [item['y'] for item in data]

    plt.figure(figsize=(10, 6))
    if graph_type == "line":
        plt.plot(x, y, marker="o")
    elif graph_type == "bar":
        plt.bar(x, y)

    plt.xlabel(x_label)
    plt.ylabel(y_label)
    plt.title(title)
    plt.grid(True)

    # Save the plot to a buffer
    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    encoded_image = base64.b64encode(buf.read()).decode("utf-8")
    buf.close()
    plt.close()
    return {
        "type": "graph",
        "content": encoded_image,
        "metadata": {
            "x_label": x_label,
            "y_label": y_label,
            "title": title,
        },
    }


sql_query_tool = Tool(
    function_declarations=[list_datasets_func, list_tables_func, get_table_func, sql_query_func]
)
model = GenerativeModel(
    "gemini-1.5-pro-001",
    generation_config={"temperature": 0},
    tools=[sql_query_tool],
)

# Initialize persistent chat outside the function
chat = model.start_chat()

# Function to Handle User Prompt and Display Response
def handle_user_prompt(prompt, chat):
    prompt += """
As a preliminary set of actions, always analyze the data residing in BigQuery by executing the following functions in order: list datasets, list tables, get table.
When responding to user queries, determine if a visualization is needed. If yes, call the `generate_visualization` function with appropriate parameters.
    """

    response = chat.send_message(prompt)
    response = response.candidates[0].content.parts[0]

    api_requests_and_responses = []
    backend_details = ""

    function_calling_in_process = True
    while function_calling_in_process:
        try:
            params = {}
            for key, value in response.function_call.args.items():
                params[key] = value

            if response.function_call.name == "list_datasets":
                api_response = [BIGQUERY_DATASET_ID]
                api_requests_and_responses.append([response.function_call.name, params, api_response])

            if response.function_call.name == "list_tables":
                dataset_id = f"{BIGQUERY_PROJECT_ID}.{params['dataset_id']}"
                api_response = client.list_tables(dataset_id)
                api_response = str([table.table_id for table in api_response])
                api_requests_and_responses.append([response.function_call.name, params, api_response])

            if response.function_call.name == "get_table":
                table_id = f"{BIGQUERY_PROJECT_ID}.{params['table_id']}"
                api_response = client.get_table(table_id)
                api_response = api_response.to_api_repr()
                api_requests_and_responses.append([response.function_call.name, params, api_response])

            if response.function_call.name == "sql_query":
                job_config = bigquery.QueryJobConfig(maximum_bytes_billed=100000000)
                query_job = client.query(params["query"], job_config=job_config)
                api_response = query_job.result()
                api_response = str([dict(row) for row in api_response])
                api_requests_and_responses.append([response.function_call.name, params, api_response])

            if response.function_call.name == "generate_visualization":
                graph_data = eval(params.get("data"))
                graph_type = params.get("graph_type")
                x_label = params.get("x_label", "X-Axis")
                y_label = params.get("y_label", "Y-Axis")
                title = params.get("title", "Generated Graph")
                api_response = generate_visualization(graph_data, graph_type, x_label, y_label, title)
                api_requests_and_responses.append([response.function_call.name, params, api_response])

            response = chat.send_message(
                Part.from_function_response(
                    name=response.function_call.name,
                    response={"content": api_response},
                )
            )
            response = response.candidates[0].content.parts[0]

        except AttributeError:
            function_calling_in_process = False

        except Exception as e:
            print(f"An Error Occurred: {e}")
            function_calling_in_process = False

    return response, api_requests_and_responses


# Interactive chat loop
def interactive_chat():
    global chat  # Make chat object persistent between calls
    while True:
        prompt = input("Ask your question (or type 'exit' to quit): ")
        if prompt.lower() == 'exit':
            break
        full_response, backend_details = handle_user_prompt(prompt, chat)
        if "type" in full_response and full_response["type"] == "graph":
            print(f"Graph metadata: {full_response['metadata']}")
            with open("graph_output.html", "w") as f:
                f.write(f'<img src="data:image/png;base64,{full_response["content"]}" alt="{full_response["metadata"]["title"]}">')
            print("Graph saved as 'graph_output.html'. Open it in a browser to view.")
        else:
            print("\nResponse:")
            print(full_response)
        print("\nFunction calls, parameters, and responses:")
        print(backend_details)


# Start interactive chat session
interactive_chat()
