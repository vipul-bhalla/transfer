# Modified get_table_func to fetch and use column descriptions
def get_table_metadata(table_id):
    table = client.get_table(table_id)
    table_schema = table.schema
    column_metadata = []

    for field in table_schema:
        column_metadata.append({
            "name": field.name,
            "description": field.description if field.description else "No description available",
            "type": field.field_type
        })
    
    return column_metadata

# Modify the handle_user_prompt function to include column descriptions in the prompt
def handle_user_prompt(prompt, chat):
    # Example dataset and table for demonstration purposes
    dataset_id = "gcp_fdts"
    table_id = f"{BIGQUERY_PROJECT_ID}.{dataset_id}.transactions"
    
    # Fetch column descriptions and add them to the prompt for context
    column_metadata = get_table_metadata(table_id)
    metadata_str = "\n".join([f"Column: {col['name']}, Description: {col['description']}, Type: {col['type']}" for col in column_metadata])
    
    # Append the column metadata to the user prompt
    prompt += f"""
    The following is the metadata of the table to help you understand the columns:
    {metadata_str}
    
    Please base your SQL query or response on the most relevant columns based on this metadata.
    """

    response = chat.send_message(prompt)
    response = response.candidates[0].content.parts[0]

    api_requests_and_responses = []
    backend_details = ""

    function_calling_in_process = True
    while function_calling_in_process:
        try:
            params = {}
            for key, value in response.function_call.args.items():
                params[key] = value

            if response.function_call.name == "list_datasets":
                # Use the known public dataset
                api_response = [BIGQUERY_DATASET_ID]
                api_requests_and_responses.append([response.function_call.name, params, api_response])

            if response.function_call.name == "list_tables":
                dataset_id = f"{BIGQUERY_PROJECT_ID}.{params['dataset_id']}"
                api_response = client.list_tables(dataset_id)
                api_response = str([table.table_id for table in api_response])
                api_requests_and_responses.append([response.function_call.name, params, api_response])

            if response.function_call.name == "get_table":
                table_id = f"{BIGQUERY_PROJECT_ID}.{params['table_id']}"
                api_response = client.get_table(table_id)
                api_response = api_response.to_api_repr()
                api_requests_and_responses.append([
                    response.function_call.name,
                    params,
                    [str(api_response.get("description", "")), str([column["name"] for column in api_response["schema"]["fields"]])]
                ])
                api_response = str(api_response)

            if response.function_call.name == "sql_query":
                job_config = bigquery.QueryJobConfig(maximum_bytes_billed=100000000)
                try:
                    cleaned_query = params["query"].replace("\\n", " ").replace("\n", "").replace("\\", "")
                    query_job = client.query(cleaned_query, job_config=job_config)
                    api_response = query_job.result()
                    api_response = str([dict(row) for row in api_response])
                    api_response = api_response.replace("\\", "").replace("\n", "")
                    api_requests_and_responses.append([response.function_call.name, params, api_response])
                except Exception as e:
                    api_response = f"{str(e)}"
                    api_requests_and_responses.append([response.function_call.name, params, api_response])

            response = chat.send_message(
                Part.from_function_response(
                    name=response.function_call.name,
                    response={"content": api_response},
                ),
            )
            response = response.candidates[0].content.parts[0]

            backend_details += f"- Function call:\n   - Function name: `{api_requests_and_responses[-1][0]}`\n"
            backend_details += f"   - Function parameters: `{api_requests_and_responses[-1][1]}`\n"
            backend_details += f"   - API response: `{api_requests_and_responses[-1][2]}`\n\n"

        except AttributeError:
            function_calling_in_process = False

    full_response = response.text

    return full_response, backend_details

# Example interactive loop to include column metadata in the chat context
def interactive_chat():
    global chat  # Make chat object persistent between calls
    while True:
        prompt = input("Ask your question (or type 'exit' to quit): ")
        if prompt.lower() == 'exit':
            break
        full_response, backend_details = handle_user_prompt(prompt, chat)
        print("\nResponse:")
        print(full_response)
        print("\nFunction calls, parameters, and responses:")
        print(backend_details)

# Start interactive chat session
interactive_chat()
